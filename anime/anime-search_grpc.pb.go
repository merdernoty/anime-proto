// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: anime/anime-search.proto

package anime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnimeService_SearchAnime_FullMethodName  = "/anime.AnimeService/SearchAnime"
	AnimeService_GetAnimeById_FullMethodName = "/anime.AnimeService/GetAnimeById"
	AnimeService_ListAnime_FullMethodName    = "/anime.AnimeService/ListAnime"
)

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeServiceClient interface {
	SearchAnime(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetAnimeById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*AnimeResponse, error)
	ListAnime(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) SearchAnime(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, AnimeService_SearchAnime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) GetAnimeById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*AnimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnimeResponse)
	err := c.cc.Invoke(ctx, AnimeService_GetAnimeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) ListAnime(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, AnimeService_ListAnime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility.
type AnimeServiceServer interface {
	SearchAnime(context.Context, *SearchRequest) (*SearchResponse, error)
	GetAnimeById(context.Context, *GetByIdRequest) (*AnimeResponse, error)
	ListAnime(context.Context, *ListRequest) (*SearchResponse, error)
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnimeServiceServer struct{}

func (UnimplementedAnimeServiceServer) SearchAnime(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnime not implemented")
}
func (UnimplementedAnimeServiceServer) GetAnimeById(context.Context, *GetByIdRequest) (*AnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeById not implemented")
}
func (UnimplementedAnimeServiceServer) ListAnime(context.Context, *ListRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnime not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}
func (UnimplementedAnimeServiceServer) testEmbeddedByValue()                      {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_SearchAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).SearchAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_SearchAnime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).SearchAnime(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_GetAnimeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).GetAnimeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_GetAnimeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).GetAnimeById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_ListAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).ListAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_ListAnime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).ListAnime(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anime.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAnime",
			Handler:    _AnimeService_SearchAnime_Handler,
		},
		{
			MethodName: "GetAnimeById",
			Handler:    _AnimeService_GetAnimeById_Handler,
		},
		{
			MethodName: "ListAnime",
			Handler:    _AnimeService_ListAnime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anime/anime-search.proto",
}
